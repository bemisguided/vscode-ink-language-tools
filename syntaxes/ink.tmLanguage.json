{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ink",
  "scopeName": "source.ink",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#knots"
    },
    {
      "include": "#stitches"
    },
    {
      "include": "#choices"
    },
    {
      "include": "#diverts"
    },
    {
      "include": "#conditionals"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#lists"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#tags"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#includes"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ink",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.ink",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "knots": {
      "patterns": [
        {
          "name": "entity.name.function.knot.ink",
          "match": "^\\s*(={2,})\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(={2,})?\\s*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.knot.begin.ink"
            },
            "2": {
              "name": "entity.name.function.knot.ink"
            },
            "3": {
              "name": "punctuation.definition.knot.end.ink"
            }
          }
        }
      ]
    },
    "stitches": {
      "patterns": [
        {
          "name": "entity.name.function.stitch.ink",
          "match": "^\\s*(=)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.stitch.ink"
            },
            "2": {
              "name": "entity.name.function.stitch.ink"
            }
          }
        }
      ]
    },
    "choices": {
      "patterns": [
        {
          "name": "markup.list.unnumbered.choice.sticky.ink",
          "match": "^\\s*(\\+)(?:\\s*\\{([^}]*)\\})?\\s*(.*)$",
          "captures": {
            "1": {
              "name": "punctuation.definition.choice.sticky.ink"
            },
            "2": {
              "name": "meta.embedded.block.conditional.ink",
              "patterns": [
                {
                  "include": "#conditional-content"
                }
              ]
            },
            "3": {
              "name": "string.unquoted.choice.text.ink",
              "patterns": [
                {
                  "include": "#choice-text"
                },
                {
                  "include": "#tags"
                }
              ]
            }
          }
        },
        {
          "name": "markup.list.unnumbered.choice.once.ink",
          "match": "^\\s*(\\*)(?:\\s*\\{([^}]*)\\})?\\s*(.*)$",
          "captures": {
            "1": {
              "name": "punctuation.definition.choice.once.ink"
            },
            "2": {
              "name": "meta.embedded.block.conditional.ink",
              "patterns": [
                {
                  "include": "#conditional-content"
                }
              ]
            },
            "3": {
              "name": "string.unquoted.choice.text.ink",
              "patterns": [
                {
                  "include": "#choice-text"
                },
                {
                  "include": "#tags"
                }
              ]
            }
          }
        }
      ]
    },
    "choice-text": {
      "patterns": [
        {
          "name": "string.unquoted.choice.text.ink",
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.choice.ink"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.choice.ink"
            }
          },
          "patterns": [
            {
              "name": "string.unquoted.choice.text.ink",
              "match": "[^\\[\\]#]+"
            },
            {
              "include": "#tags"
            }
          ]
        },
        {
          "include": "#diverts"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "diverts": {
      "patterns": [
        {
          "name": "keyword.control.flow.divert.ink",
          "match": "(->)\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)?|END|DONE)",
          "captures": {
            "1": {
              "name": "punctuation.definition.divert.ink"
            },
            "2": {
              "name": "entity.name.function.divert-target.ink"
            }
          }
        },
        {
          "name": "keyword.control.flow.tunnel.return.ink",
          "match": "(->)(->)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tunnel.ink"
            },
            "2": {
              "name": "punctuation.definition.tunnel.return.ink"
            }
          }
        },
        {
          "name": "keyword.control.flow.tunnel.ink",
          "match": "(->)\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)?)\\s*(->)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tunnel.begin.ink"
            },
            "2": {
              "name": "entity.name.function.tunnel-target.ink"
            },
            "3": {
              "name": "punctuation.definition.tunnel.end.ink"
            }
          }
        }
      ]
    },
    "conditionals": {
      "patterns": [
        {
          "name": "meta.embedded.block.conditional.ink",
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.conditional.begin.ink"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.conditional.end.ink"
            }
          },
          "patterns": [
            {
              "include": "#conditional-content"
            }
          ]
        }
      ]
    },
    "conditional-content": {
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#variables-reference"
        },
        {
          "include": "#functions-call"
        },
        {
          "name": "punctuation.separator.conditional.ink",
          "match": "[:;|]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "storage.type.variable.ink",
          "match": "^\\s*(VAR|CONST|temp)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)?",
          "captures": {
            "1": {
              "name": "keyword.declaration.variable.ink"
            },
            "2": {
              "name": "variable.other.ink"
            },
            "3": {
              "name": "keyword.operator.assignment.ink"
            }
          }
        },
        {
          "name": "storage.type.variable.assignment.ink",
          "match": "^\\s*(~)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=|\\+=|-=|\\*=|/=)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.assignment.ink"
            },
            "2": {
              "name": "variable.other.ink"
            },
            "3": {
              "name": "keyword.operator.assignment.ink"
            }
          }
        }
      ]
    },
    "variables-reference": {
      "patterns": [
        {
          "name": "variable.other.ink",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "lists": {
      "patterns": [
        {
          "name": "storage.type.list.ink",
          "match": "^\\s*(LIST)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
          "captures": {
            "1": {
              "name": "keyword.declaration.list.ink"
            },
            "2": {
              "name": "entity.name.type.list.ink"
            },
            "3": {
              "name": "keyword.operator.assignment.ink"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.ink",
          "match": "^\\s*(===)\\s*(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\(([^)]*)\\))?\\s*(===)?",
          "captures": {
            "1": {
              "name": "punctuation.definition.function.begin.ink"
            },
            "2": {
              "name": "keyword.declaration.function.ink"
            },
            "3": {
              "name": "entity.name.function.ink"
            },
            "4": {
              "name": "meta.function.parameters.ink"
            },
            "5": {
              "name": "variable.parameter.ink"
            },
            "6": {
              "name": "punctuation.definition.function.end.ink"
            }
          }
        },
        {
          "name": "keyword.control.return.ink",
          "match": "^\\s*(~)\\s*(return)\\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.return.ink"
            },
            "2": {
              "name": "keyword.control.return.ink"
            }
          }
        }
      ]
    },
    "functions-call": {
      "patterns": [
        {
          "name": "meta.function-call.ink",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.ink"
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.ink"
            }
          }
        }
      ]
    },
    "tags": {
      "patterns": [
        {
          "name": "entity.other.attribute-name.tag.ink",
          "match": "#\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:[=:][^\\s#]+)?)",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.tag.value.ink"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ink",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ink",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.ink",
          "match": "\\b\\d*\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.ink",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.ink",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.ink",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.arithmetic.ink",
          "match": "\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.assignment.ink",
          "match": "=|\\+=|-=|\\*=|/="
        },
        {
          "name": "keyword.operator.ink",
          "match": "\\?|\\^|has|hasnt"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ink",
          "match": "\\b(if|else|elseif|while|for|switch|case|default)\\b"
        },
        {
          "name": "keyword.other.ink",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "support.function.builtin.ink",
          "match": "\\b(CHOICE_COUNT|TURNS_SINCE|LIST_COUNT|LIST_MIN|LIST_MAX|LIST_ALL|LIST_VALUE|LIST_RANGE|LIST_INVERT|RANDOM|SEED_RANDOM|INT|FLOOR|CEILING|ROUND|POW|SQRT|SIN|COS|TAN|ASIN|ACOS|ATAN)\\b"
        }
      ]
    },
    "includeMap": {
      "patterns": [
        {
          "name": "keyword.control.include.ink",
          "match": "^\\s*(INCLUDE)\\s+(.+)$",
          "captures": {
            "1": {
              "name": "keyword.control.include.ink"
            },
            "2": {
              "name": "string.unquoted.include.path.ink"
            }
          }
        }
      ]
    }
  }
}